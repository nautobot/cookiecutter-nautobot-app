---
name: "CI"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "{% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}"
  cancel-in-progress: true
on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
  pull_request: ~

env:
  APP_NAME: "{{ cookiecutter.project_slug }}"

jobs:
  ruff-format:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Linting: ruff format"
        run: "poetry run invoke ruff --action format"
  bandit:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Linting: bandit"
        run: "poetry run invoke bandit"
  ruff-lint:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Linting: ruff"
        run: "poetry run invoke ruff"
  check-docs-build:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{cookiecutter.app_name.upper()}}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Check Docs Build"
        run: "poetry run invoke build-and-check-docs"
  poetry:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Checking: poetry lock file"
        run: "poetry run invoke lock --check"
  yamllint:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
  check-in-docker:
    needs:
      - "bandit"
      - "ruff-format"
      - "ruff-lint"
      - "poetry"
      - "yamllint"
    runs-on: "ubuntu-22.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]
        nautobot-version: ["{{ cookiecutter.min_nautobot_version }}"]
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_PYTHON_VER: "{% raw %}${{ matrix.python-version }}{% endraw %}"
      INVOKE_{{ cookiecutter.app_name.upper() }}_NAUTOBOT_VER: "{% raw %}${{ matrix.nautobot-version }}{% endraw %}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "{% raw %}${{ steps.buildx.outputs.name }}{% endraw %}"
          context: "./"
          push: false
          load: true
          tags: "{% raw %}${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope={% raw %}${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          cache-to: "type=gha,scope={% raw %}${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          build-args: |
            NAUTOBOT_VER={% raw %}${{ matrix.nautobot-version }}{% endraw %}
            PYTHON_VER={% raw %}${{ matrix.python-version }}{% endraw %}
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Linting: pylint"
        run: "poetry run invoke pylint"
      - name: "Checking: App Config"
        run: "poetry run invoke validate-app-config"
      - name: "Checking: migrations"
        run: "poetry run invoke check-migrations"
  unittest:
    needs:
      - "check-in-docker"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.11"]
        db-backend: ["postgresql"]
        nautobot-version: ["stable"]
        include:
          - python-version: "3.11"
            db-backend: "postgresql"
            nautobot-version: "{{ cookiecutter.min_nautobot_version }}"
          - python-version: "3.11"
            db-backend: "mysql"
            nautobot-version: "stable"
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_PYTHON_VER: "{% raw %}${{ matrix.python-version }}{% endraw %}"
      INVOKE_{{ cookiecutter.app_name.upper() }}_NAUTOBOT_VER: "{% raw %}${{ matrix.nautobot-version }}{% endraw %}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "{% raw %}${{ steps.buildx.outputs.name }}{% endraw %}"
          context: "./"
          push: false
          load: true
          tags: "{% raw %}${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope={% raw %}${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          cache-to: "type=gha,scope={% raw %}${{ matrix.nautobot-version }}-py${{ matrix.python-version }}{% endraw %}"
          build-args: |
            NAUTOBOT_VER={% raw %}${{ matrix.nautobot-version }}{% endraw %}
            PYTHON_VER={% raw %}${{ matrix.python-version }}{% endraw %}
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Use Mysql invoke settings when needed"
        run: "cp invoke.mysql.yml invoke.yml"
        if: "matrix.db-backend == 'mysql'"
      - name: "Run Tests"
        run: "poetry run invoke unittest"
  changelog:
    if: |
      contains(fromJson('["develop","ltm-1.6"]'), github.base_ref) &&
      (github.head_ref != 'main')
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Check for changelog entry"
        run: |
          {% raw -%}
          git fetch --no-tags origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          poetry run towncrier check --compare-with origin/${{ github.base_ref }}{% endraw %}
  publish_gh:
    needs:
      - "unittest"
    name: "Publish to GitHub"
    runs-on: "ubuntu-22.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.11"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Install Dependencies (needed for mkdocs)"
        run: "poetry install --no-root"
      - name: "Build Documentation"
        run: "poetry run invoke build-and-check-docs"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "{% raw %}${{ secrets.NTC_GITHUB_TOKEN }}{% endraw %}"  # use GH_NAUTOBOT_BOT_TOKEN for Nautobot Org repos.
          file: "dist/*"
          tag: "{% raw %}${{ github.ref }}{% endraw %}"
          overwrite: true
          file_glob: true
  publish_pypi:
    needs:
      - "unittest"
    name: "Push Package to PyPI"
    runs-on: "ubuntu-22.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      INVOKE_{{ cookiecutter.app_name.upper() }}_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.11"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Install Dependencies (needed for mkdocs)"
        run: "poetry install --no-root"
      - name: "Build Documentation"
        run: "poetry run invoke build-and-check-docs"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "{% raw %}${{ secrets.PYPI_API_TOKEN }}{% endraw %}"
  slack-notify:
    needs:
      - "publish_gh"
      - "publish_pypi"
    runs-on: "ubuntu-22.04"
    env:
      SLACK_WEBHOOK_URL: "{% raw %}${{ secrets.SLACK_WEBHOOK_URL }}{% endraw %}"
      SLACK_MESSAGE: >-
        *NOTIFICATION: NEW-RELEASE-PUBLISHED*\n
        Repository: <{% raw %}${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}{% endraw %}>\n
        Release: <{% raw %}${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}{% endraw %}>\n
        Published by: <{% raw %}${{ github.server_url }}/${{ github.actor }}|${{ github.actor }}{% endraw %}>
    steps:
      - name: "Send a notification to Slack"
        # ENVs cannot be used directly in job.if. This is a workaround to check
        # if SLACK_WEBHOOK_URL is present.
        if: "env.SLACK_WEBHOOK_URL != ''"
        uses: "slackapi/slack-github-action@v1"
        with:
          payload: |
            {
              "text": "{% raw %}${{ env.SLACK_MESSAGE }}{% endraw %}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "{% raw %}${{ env.SLACK_MESSAGE }}{% endraw %}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: "{% raw %}${{ secrets.SLACK_WEBHOOK_URL }}{% endraw %}"
          SLACK_WEBHOOK_TYPE: "INCOMING_WEBHOOK"
